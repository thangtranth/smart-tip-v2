{"message":"cannot find function `panic_str` in module `env`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1109,"byte_end":1118,"line_start":36,"line_end":36,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"        env::panic_str(\"Smart tip should be initialized before usage\")","highlight_start":14,"highlight_end":23}],"label":"not found in `env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this function","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use core::panicking::panic_str;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `panic_str` in module `env`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:36:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        env::panic_str(\"Smart tip should be initialized before usage\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `env`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse core::panicking::panic_str;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"cannot find function `log_str` in module `env`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":3067,"byte_end":3074,"line_start":99,"line_end":99,"column_start":14,"column_end":21,"is_primary":true,"text":[{"text":"        env::log_str(&format!(","highlight_start":14,"highlight_end":21}],"label":"not found in `env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `log_str` in module `env`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:99:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        env::log_str(&format!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `env`\u001b[0m\n\n"}
{"message":"cannot find function `log_str` in module `env`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4543,"byte_end":4550,"line_start":144,"line_end":144,"column_start":14,"column_end":21,"is_primary":true,"text":[{"text":"        env::log_str(&format!(","highlight_start":14,"highlight_end":21}],"label":"not found in `env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `log_str` in module `env`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:144:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        env::log_str(&format!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `env`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":5091,"byte_end":5232,"line_start":169,"line_end":172,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(10)","highlight_start":1,"highlight_end":34},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:169:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(10)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6396,"byte_end":6537,"line_start":214,"line_end":217,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(1))","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(10)","highlight_start":1,"highlight_end":34},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:214:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(1))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(10)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6728,"byte_end":6835,"line_start":225,"line_end":227,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:225:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6972,"byte_end":7113,"line_start":231,"line_end":234,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(1))","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(10)","highlight_start":1,"highlight_end":34},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:231:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(1))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(10)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":7314,"byte_end":7421,"line_start":242,"line_end":244,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:242:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":7661,"byte_end":7768,"line_start":251,"line_end":253,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(1))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:251:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(1))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":7857,"byte_end":7998,"line_start":257,"line_end":260,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(2))","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(30)","highlight_start":1,"highlight_end":34},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:257:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(2))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(30)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":8345,"byte_end":8452,"line_start":270,"line_end":272,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:270:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":948,"line_start":27,"line_end":27,"column_start":9,"column_end":85,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1087,"line_start":31,"line_end":31,"column_start":9,"column_end":73,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1191,"line_start":34,"line_end":34,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":8589,"byte_end":8730,"line_start":276,"line_end":279,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"        testing_env!(VMContextBuilder::new()","highlight_start":9,"highlight_end":45},{"text":"            .predecessor_account_id(accounts(1))","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(10)","highlight_start":1,"highlight_end":34},{"text":"            .build());","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/thangtran/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4940,"byte_end":4940,"line_start":163,"line_end":163,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:276:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(VMContextBuilder::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(1))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(10)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"`UnorderedMap<std::string::String, Contribution>` doesn't implement `Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":833,"byte_end":879,"line_start":27,"line_end":27,"column_start":5,"column_end":51,"is_primary":true,"text":[{"text":"    members: UnorderedMap<AccountId, Contribution>,","highlight_start":5,"highlight_end":51}],"label":"`UnorderedMap<std::string::String, Contribution>` cannot be formatted using `{:?}` because it doesn't implement `Debug`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":800,"byte_end":805,"line_start":25,"line_end":25,"column_start":44,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Debug)]","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/Users/thangtran/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Debug` is not implemented for `UnorderedMap<std::string::String, Contribution>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `UnorderedMap<std::string::String, Contribution>` doesn't implement `Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Project {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    members: UnorderedMap<AccountId, Contribution>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`UnorderedMap<std::string::String, Contribution>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Debug` is not implemented for `UnorderedMap<std::string::String, Contribution>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`UnorderedMap<TaskId, TaskStatus>` doesn't implement `Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":998,"byte_end":1037,"line_start":31,"line_end":31,"column_start":5,"column_end":44,"is_primary":true,"text":[{"text":"    tasks: UnorderedMap<TaskId, TaskStatus>,","highlight_start":5,"highlight_end":44}],"label":"`UnorderedMap<TaskId, TaskStatus>` cannot be formatted using `{:?}` because it doesn't implement `Debug`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":800,"byte_end":805,"line_start":25,"line_end":25,"column_start":44,"column_end":49,"is_primary":false,"text":[{"text":"#[derive(BorshSerialize, BorshDeserialize, Debug)]","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/Users/thangtran/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Debug` is not implemented for `UnorderedMap<TaskId, TaskStatus>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `UnorderedMap<TaskId, TaskStatus>` doesn't implement `Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(BorshSerialize, BorshDeserialize, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    tasks: UnorderedMap<TaskId, TaskStatus>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`UnorderedMap<TaskId, TaskStatus>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Debug` is not implemented for `UnorderedMap<TaskId, TaskStatus>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5274,"byte_end":5285,"line_start":173,"line_end":173,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"        let project = Project::new(vec![accounts(0), accounts(1)]);","highlight_start":41,"highlight_end":52}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:173:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let project = Project::new(vec![accounts(0), accounts(1)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5486,"byte_end":5497,"line_start":179,"line_end":179,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:179:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5696,"byte_end":5707,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:187:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6144,"byte_end":6155,"line_start":203,"line_end":203,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:203:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6583,"byte_end":6594,"line_start":218,"line_end":218,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:218:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6881,"byte_end":6892,"line_start":228,"line_end":228,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:228:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7190,"byte_end":7202,"line_start":236,"line_end":236,"column_start":53,"column_end":65,"is_primary":true,"text":[{"text":"        let allocated_amount = project.allocate_tip(&accounts(0));","highlight_start":53,"highlight_end":65}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&std::string::String`\n   found reference `&ValidAccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:236:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let allocated_amount = project.allocate_tip(&accounts(0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&std::string::String\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&ValidAccountId\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7467,"byte_end":7478,"line_start":245,"line_end":245,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:245:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8085,"byte_end":8097,"line_start":262,"line_end":262,"column_start":63,"column_end":75,"is_primary":true,"text":[{"text":"        let allocated_amount_account_0 = project.allocate_tip(&accounts(0));","highlight_start":63,"highlight_end":75}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&std::string::String`\n   found reference `&ValidAccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:262:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let allocated_amount_account_0 = project.allocate_tip(&accounts(0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&std::string::String\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&ValidAccountId\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8214,"byte_end":8226,"line_start":264,"line_end":264,"column_start":63,"column_end":75,"is_primary":true,"text":[{"text":"        let allocated_amount_account_1 = project.allocate_tip(&accounts(1));","highlight_start":63,"highlight_end":75}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&std::string::String`\n   found reference `&ValidAccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:264:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let allocated_amount_account_1 = project.allocate_tip(&accounts(1));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&std::string::String\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&ValidAccountId\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8498,"byte_end":8509,"line_start":273,"line_end":273,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"        let mut project = Project::new(vec![accounts(0)]);","highlight_start":45,"highlight_end":56}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:273:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut project = Project::new(vec![accounts(0)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8807,"byte_end":8819,"line_start":281,"line_end":281,"column_start":53,"column_end":65,"is_primary":true,"text":[{"text":"        let allocated_amount = project.allocate_tip(&accounts(0));","highlight_start":53,"highlight_end":65}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&std::string::String`\n   found reference `&ValidAccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:281:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let allocated_amount = project.allocate_tip(&accounts(0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&std::string::String\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&ValidAccountId\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 26 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 26 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0425, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0425, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
